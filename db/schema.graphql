input AUTH_PROVIDER_CREDENTIALS {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  credentials: AUTH_PROVIDER_CREDENTIALS
}

scalar DateTime

type Link implements Node {
  createdAt: DateTime!
  description: String!
  id: ID!
  postedBy: User!
  url: String!
  votes: [Vote!]!
}

input LinkFilter {
  OR: [LinkFilter!]
  descriptionContains: String
  urlContains: String
}

type Mutation {
  createLink(description: String!, url: String!): Link!
  createUser(authProvider: AuthProviderSignupData, name: String!): User!
  createVote(linkId: ID): Vote!
  signinUser(credentials: AUTH_PROVIDER_CREDENTIALS): SignInUserPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type Query {
  _allLinksMeta: _QueryMeta!
  allLinks(filter: LinkFilter, first: Int, skip: Int): [Link!]
}

"""
Autogenerated return type of SignInUser
"""
type SignInUserPayload {
  token: String
  user: User
}

type User implements Node {
  createdAt: DateTime!
  email: String!
  id: ID!
  links: [Link!]!
  name: String!
  votes: [Vote!]!
}

type Vote implements Node {
  createdAt: DateTime!
  id: ID!
  link: Link!
  user: User!
}

type _QueryMeta {
  count: Int!
}